<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo+Git一个小时快速搭建个人博客]]></title>
    <url>%2F2018%2F10%2F27%2FHexo-Git%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[搭建本地环境：Hexo框架Hexo为何物 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown解析文章，并瞬间利用靓丽的主题生成静态网页。其中，Markdown是一个用于将普通文本转换为HTML的工具，它以易于阅读和编写的纯文本格式进行编写，然后将其转换为的HTML（或XHTML）。 Hexo安装本文是基于Windows7系统安装，如果是其他系统可参见Hexo官方文档。 Hexo安装的前提是电脑预安装Node.js和Git。如果你的电脑已安装Node.js和Git，直接跳到第三步开始安装Hexo；如果未安装则需要先按照前两步提示进行安装，下载安装非常快。 Node.js下载安装，默认安装即可。 Git下载安装，Git官网下载速度非常慢，建议在腾讯软件中心下载Git，默认安装即可。用作将本地的内容提交到GitHub仓库，后续会介绍如何操作。 利用 npm 命令安装Hexo。在任意位置右击鼠标，选择Git Bash输入以下命令即可安装。耗时稍长，安装顺利的话只需要几分钟，如果在安装过程中遇到问题，可重新安装。其中，npm 是 JavaScript 世界的包管理工具,并且是 Node.js 平台的默认包管理工具。1$ npm install -g hexo-cli 成功安装Node.js、Git和Hexo后，可用以下命令查看相应版本，结果如下图：123456789101112131415161718192021222324252627$ node -v //查看node版本v8.12.0$ npm -v //查看npm版本6.4.1$ git --version //查看git版本git version 2.19.1.windows.1$ hexo --version //查看hexo版本hexo: 3.8.0hexo-cli: 1.1.0os: Windows_NT 6.1.7601 win32 x64http_parser: 2.8.0node: 8.12.0v8: 6.2.414.66uv: 1.19.2zlib: 1.2.11ares: 1.10.1-DEVmodules: 57nghttp2: 1.32.0napi: 3openssl: 1.0.2picu: 60.1unicode: 10.0cldr: 32.0tz: 2017c 建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。了解目录结构及相关信息可参看Hexo官方文档，稍后配置Hexo时会涉及到。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 至此博客本地环境已经搭建完毕，并附上Hexo常用命令。下面进行测试一下，发布一篇名为”Test”的博文，结果展示如下图：123$ hexo new "Test" //新建一篇文章，new后面跟的是标题，最好用双引号括起来，特别是标题中有空格$ hexo g //生成静态文件，g是generate的简写$ hexo s //启动服务器。默认情况下，访问网址为： http://localhost:4000/。 搭建GitHub环境 Github注册 新建仓库（new repository）。注意Owner与repository的前半部分必须一致，比如 开启GitHub Pages。进入刚才新建的仓库，点击Settings并将页面拉到底，即可看见GitHub Pages，该主页托管了上述建立的仓库，主页地址如下图所示，即为刚才新建的仓库地址。 关联Hexo本地环境与GitHub Pages初次运行 Git 前的配置 初始化Git，创建一个空的Git仓库，或者重新初始化存在的仓库: 1$ git init 设置你的用户名称与邮件地址： 12$ git config --global user.name "John Doe" //GitHub注册用户名$ git config --global user.email johndoe@example.com //GitHub注册邮箱 如果使用了 –global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 –global 选项的命令来配置。 使用SSH连接到GitHub 该部分参考Github帮助文档：Connecting to GitHub with SSH。 查看存在的SSH公/私钥。通常私钥保存在文件id_rsa，私钥保存在文件id_rsa.pub。 1$ ls -al ~/.ssh 生成SSH公/私钥 1234$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com" //替换邮箱为注册邮箱$ Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa): //提示输入公/私钥保存路径，直接回车即可$ Enter passphrase (empty for no passphrase): //输入密码，可以留空，直接回车即可$ Enter same passphrase again: //再次输入密码，可以留空，直接回车即可 将秘钥添加到SSH代理 1234$ eval $(ssh-agent -s) //首先确保SSH代理在运行Agent pid 59566 //显示进程id$ ssh-add ~/.ssh/id_rsa //将秘钥添加到SSH代理 将公钥添加到Github账户 1$ clip &lt; ~/.ssh/id_rsa.pub //复制刚才生成的公钥，如果公钥保存路径不是默认路径则该命令无效 然后点击Github页面右上角的头像，在弹出栏中点击Settings，并在新页面左边栏中点击SSH and GPG keys，在弹出页面点击New SSH key，并将复制的公钥贴过去，title会根据邮箱自动生成。 测试SSH连接12$ ssh -T git@github.com //测试代码，出现下一行提示表示连接成功Hi username! You've successfully authenticated, but GitHub does not provide shell access. 将网站部署到服务器上 安装 hexo-deployer-git: 1$ npm install hexo-deployer-git --save 配置Deployment。 1234deploy: type: git repo:git@github.com:githubname/githubname.github.io.git branch: master 找到根目录中_config.yml中Deployment，按照以下代码格式，将其中的githubname更换为你的Github注册用户名即可。 将博客发布到Github123$ hexo clean //清除缓存文件 (db.json) 和已生成的静态文件 (public)。$ hexo generate // 生成静态文件$ hexo deploy // 部署网站 这样就实现了Hexo本地环境与Github的关联，即可通过http://githubname.github.io访问你部署在Github上的博客了，如下图所示。 绑定域名 购买域名。阿里云，腾讯云等都有， 参考资料 HEXO+Git+Github+域名搭建个人博客 hexo+github搭建个人博客(超详细教程)]]></content>
      <categories>
        <category>QucikStart</category>
      </categories>
      <tags>
        <tag>Hexo, Git, GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩转Sci-Hub]]></title>
    <url>%2F2018%2F10%2F24%2F%E7%8E%A9%E8%BD%ACSci-Hub%2F</url>
    <content type="text"><![CDATA[挣扎许久，终于下定决心给看看英文文献，可是搜了一篇又一篇SCI文献，学校图书馆都没有购买，怎么破？假如你也遇到如此尬境，可以尝试一下SCI免费下载神器：Sci-Hub，如不可用，可尝试以下网址，或前往维基百科查看最新可用网址Sci-hub(维基百科) Sci-Hub可用网址(2018.10.24测试可用) sci-hub.tw 80.82.77.83 80.82.77.84 首先需要说明的是： Sci-Hub只支持精确匹配，不支持模糊匹配。这就意味着，搜索结果只有两种：返回目标文献或搜索结果为空。而不会像度娘或谷歌那样支持模糊匹配，返回多个搜索结果。这就要求查找文献之前，必须要提前知道目标查找文献的下列信息之一： 文献标题(String) 文献地址(URL) 文献DOI(数字对象唯一标识符)： 文献PMID(PubMed唯一标识码，生命科学或医学领域) 以下面这篇文献为例，进行介绍： Kubiak W. Completion time variance minimization on a single machine is difficult [J]. Operations Research Letters, 1993, 14(1):49-59. 使用文献标题搜索Sci-Hub搜索框键入文章标题： Completion time variance minimization on a single machine is difficult 返回结果如下图，即没有搜索到我想要的文献。不过，别急着放弃，再尝试使用文献地址(URL)、DOI、PMID进行搜索。 使用文献地址或DOI搜索首先，用度娘查找文献地址、DOI等信息： 在度娘输入文献标题搜索，并在搜索页面依次进入：百度学术-&gt;爱思唯尔(Elsevier)，即可抵达如下页面 页面最下方即为文献地址：https://doi.org/10.1016/0167-6377(93)90019-D(及文献DOI：10.1016/0167-6377(93)90019-D) 文献在百度学术通常有多个文献来源，通常任意文献来源进入之后都可以找到文献DOI，如下图所示： 然后，在Sci-Hub搜索框输入文献地址(URL)或DOI等信息，开始搜索，返回结果页如下，成功返回我想要的文献。 最后，点击右上角的下载箭头，下载文献即可。 可能涉及科学上网Sci-Hub网站涉及版权问题，某些网址可能无法使用，如遇此情况，可访问sci-hub维基百科词条查看可用网址。 如需科学上网，出门左转访问getlantern(蓝灯)下载安装即可使用。]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Sci-Hub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Git搭建博客初具模样]]></title>
    <url>%2F2018%2F10%2F21%2FHexo-Git%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%85%B7%E6%A8%A1%E6%A0%B7%2F</url>
    <content type="text"><![CDATA[利用Hexo+Git+GitHub搭建个人博客，博客已经初具模样：]]></content>
      <categories>
        <category>Picture</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Categories&Tags]]></title>
    <url>%2F2018%2F10%2F20%2FCategories-Tags%2F</url>
    <content type="text"></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test]]></title>
    <url>%2F2018%2F10%2F18%2FTest%2F</url>
    <content type="text"><![CDATA[Just a test.]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello]]></title>
    <url>%2F2018%2F10%2F18%2FHello%2F</url>
    <content type="text"><![CDATA[Winter is coming!]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>QuickStart</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
